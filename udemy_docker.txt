
本コースの目的
・Dockerの概念、操作方法を学ぶ
・Dockerでの開発環境の構築方法を学ぶ
・クラウド環境にDockerコンテナをデプロイする方法を学ぶ

Dockerのユースケース
・アプリケーション開発環境
・検証環境、本番環境
・Webサーバ、DBサーバの構築
	Webサーバ：nginx, Apache
	DBサーバ ：MySQL, PostgreSQL
・各種プログラミング言語の実行環境
・その他のミドルウェアの環境構築

Dockerを使うメリット
・プログラムの実行環境を素早く立ち上げることができる
・再現性のある環境を用意できる
	PCで開発したプログラムをサーバで動かす場合も差異が生まれにくく、トラブルになりやすい。
・設定ファイルを共有することでプロジェクトメンバー間で同じ環境を立ち上げることができる。
・PCの環境を汚さずにする

ホスト型仮想化とコンテナ型仮想化の違い
	分離レベル
		ホスト型仮想化
			・ハードウェアレベルで仮想化されており、ホストOSや仮想マシン間の分離レベルが高く、それぞれが影響を受けにくい
		コンテナ型（ホストOSの１プロセスとして実行）
			・OSの機能を使用した仮想化は従来の仮想化に比べて分離レベルは低い

DockerDesktopの設定メニュー
	About Docker Desktop：バージョンとかの確認ができる

DockerDesktopの動作確認(確認用のイメージを起動)
	docker run hello-world

Docker run コマンドを複数のコマンドに分割した場合
	Docker pull：イメージの取得
	docker create：コンテナの作成
	docker start：コンテナの起動

Docker Hubとは
	・Dockerイメージのレジストリサービス
	・Dockerイメージの公開、検索、ダウンロードすることができる

WebサイトのURL
	https://hub.docker.com

タグを指定して実行
	docker run hello-world:latest

Dockerイメージとは
	・コンテナ実行に必要なファイルをまとめたファイルシステム
	・AUFSなどの特殊なファイルシステムが使用されている
	・イメージ上のデータはレイヤで構成され読み取り専用

Whalesayコンテナの実行とDockerイメージダウンロード
	Whalesayイメージを使用してクジラに喋らせる
		docker run docker/whalesay [コンテナ内で呼び出すコマンド]
		docker run docker/whalesay cowsay yaho!!

イメージにタグ付けするコマンド
	docker タグ付けするサブコマンド 元となるイメージ 新しいイメージ
	docker tag docker/whalesay my_whalesay
	docker tag docker/whalesay my_whalesay:ver1

イメージの詳細情報を表示するコマンド
	docker inspect [イメージ名・イメージID]
	docker inspect my_whalesay

ローカルのイメージを削除するコマンド
※矯正終了する場合は-f
	docker rmi [イメージ名・イメージID]
	docker rmi -f [イメージ名・イメージID]

イメージを取得(PULL)するコマンド
	docker pull [イメージ名]
	docker pull docker/whalesay

Dockerfileからイメージをビルドするコマンド
	docker build -t docker-whale .
	
	ビルドしたイメージの実行
	docker run docker-whale

レジストリサーバへログインするコマンド
	Docker Hubにログインする場合
	docker login
	
	Quay.ioにログインする場合
	docker login quay.io

Docker HubにPushする際のコマンド
	docker push <docker ID>/<イメージ名>:<タグ名>

Dockerイメージの削除
	docker images でIMAGE IDを表示
	docker rmi -f [IMAGE ID]

Docker Hubから自分がpushしたイメージを取得
	docker pull hirotakaisg/docker-whale:ver1

nginxコンテナの実行とデタッチモード
	nginxのコンテナを立ち上げるコマンド
	\(バックスラッシュ)を入れることでコマンドを複数行にわたって記述できる
		docker run --name <コンテナ名> -d \
		-p <ホスト側のポート番号>:<コンテナ側のポート番号> \
		<イメージ名>

	nginxの起動
	docker run --name test-nginx -d -p 8080:80 nginx
	localhost:8080

	nginxの停止
	docker stop test-nginx

	nginxのコンテナの削除
	docker rm test-nginx

バインドマウント
	docker run --name some-nginx -v /some/content:/usr/share/nginx/html:ro -d nginx
	docker run --name first-nginx -v /Users/hirotaka/git/practice-docker/html:/usr/share/nginx/html:ro -d -p 8080:80 nginx

編集する設定ファイルを取り出す
	docker run --name tmp-nginx --rm -d nginx

docker cpコマンドの説明
	ホストマシンのファイルをコンテナ内にコピーする場合
	docker cp <ホスト上のコピーしたいファイルのパス> <コンテナ名 or ID>:<コピー先のパス>


	コンテナ内のファイルをホストマシンにコピーする場合
	docker cp <コンテナ名 or ID>:<コンテナ上のコピーしたいファイルのパス> <コピー先のパス>
	docker cp tmp-nginx:/etc/nginx/conf.d/default.conf ./


コンテナのライフサイクル
	docker create --name status-test -it alpine /bin/sh
	docker start status-test

コンテナのシェルへの接続
	ubuntuコンテナの起動
	docker run --name connect-test -t -d ubuntu /bin/bash
	docker start connect-test
	
	接続
	docker attach connect-test
	docker exec -it connect-test /bin/bash

docker commitコマンド
	docker commit <コンテナ名 or コンテナID> <イメージ名>:<タグ名>

	ubuntuを起動しシェルにログイン
	docker run --name commit-test -it -d ubuntu /bin/bash
	docker exec -it commit-test /bin/bash

	10MBのダミーファイルを作成
	cd /tmp/
	dd if=/dev/zero of=tempfile bs=1M count=10

	イメージの作成
	docker commit commit-test commit-test:ver2
	docker images

	作成したダミーファイルがいきているか確認
	docker run -it commit-test:ver2 bin/bash

	??
	docker history commit-test:ver2

linkオプション
	docker atttachを使用する場合
	docker run --link <コンテナ名 or  コンテナID>:<リンク先コンテナの別名>

linkオプションをつけた場合の動作
	・コンテナ名、またはエイリアス名でリンク先に通信できるようになる
	・リンク先の環境変数やリンク先コンテナのネットワークに関する環境変数が起動したコンテナに追加される
	

	リバースプロキシの用意
	mkdir reverse-proxy

	nginx用のリバースプロキシの設定ファイルを用意
	vim reverse_proxy.conf
	
	Dockerfileの編集
	vim Dockerfile
	
	docker build -t reverse-proxy .
	static-siteの起動
	docker run --name static-site -e AUTHOR="Hirotaka" -d dockersamples/static-site
	reverse-proxyの起動
	docker run --name reverse-proxy -p 8080:8080 --link static-site:ss -d reverse-proxy
	
	localhost:8080 #ブラウザ表示されるか確認
	reverse-proxy内部の設定を確認
	docker exec -it reverse-proxy /bin/bash
	cat /etc/hosts
	

docker-machineコマンドのインストール(macの場合)
# curlコマンドを使えるようにする
brew install curl
# docker-machineのインストール
curl -L https://github.com/docker/machine/releases/download/v0.16.2/docker-machine-`uname -s`-`uname -m` >/usr/local/bin/docker-machine && chmod +x /usr/local/bin/docker-machine

AWSへのDockerホストのプロビジョニング ★
AIM
ユーザ名:docker-test


Dockerのネットワーク ★
	ip addr show


docker inspect bridge

dockerはデフォルトでは名前解決で通信できないのでDNSサーバを立てる
	docker network connect my_nw alpine1
	docker network connect my_nw alpine2


Dockerデータ管理の概要
	コンテナ間のデータ共有ができない
	コンテナが消えるとデータも消える

	volumeの使い方
	docker-machime ssh vol-test
	docker create my 

Docker Compose
	ymlファイルを使用して、各dockerを起動・停止する
	
	Composeのステップ
		1. Dockerfileを用意をするか、使用するイメージをDocker Hubなどに用意する
		2. docker-compose.ymlを定義する
		3. docker-compose upを実行する

	Docker Composeのバージョン確認　※dockerインストール時に合わせてインストールされている
	docker-compose -v

	Docker Composeを使用したDjangoの開発環境構築
		djangoディレクトリの作成
		ファイル作成
			docker-compose.yml
			Dockerfile
			requirements.txt
		実行
			docker-compose run web django-admin.py startproject examlepj . ←うまく起動しない
		作成されたディレクトリ・ファイルの確認
			ls -l
		
	Docker Composeを使用したRuby on Railsの開発環境構築
	mkdir ror #ディレクトリの作成
		ファイル作成
			docker-compose.yml
			Gemfile
			Gemfile.lock
			Dockerfile
		実行
			docker-compose run web rails new . --force --database=postgresql
			docker-compose build
			
		vim config/database.ymlに追記
			host: db
			username: postgresql
			password:postgresql-pass
			POSTGRES_HOST_AUTH_METHOD: 'trust'
			
			
		docker-compose up -d 
		docker-compose run web rake db:create --trace
		
		webに接続
			localhost:3000


